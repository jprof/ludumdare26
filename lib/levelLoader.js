// Generated by CoffeeScript 1.6.2
(function() {
  Crafty.c("LevelLoader", {
    init: function() {
      console.log("LevelLoader created");
      window.currentLevel = 0;
      Crafty.scene("currentLevel", function() {
        var bg, newLevel;

        newLevel = window.levelData[window.currentLevel];
        bg = Crafty.e("2D, Canvas, Image");
        bg.attr({
          x: -Crafty.viewport.width,
          y: -Crafty.viewport.height,
          w: Crafty.viewport.width * 2 + newLevel["width"],
          h: Crafty.viewport.height * 2 + newLevel["height"]
        });
        bg.image("assets/img/bg2.png", "repeat");
        Crafty('LevelLoader').loadBorder(newLevel["width"], newLevel["height"]);
        Crafty('LevelLoader').loadPlayer(newLevel["player"]);
        Crafty('LevelLoader').loadEnemies(newLevel["enemies"]);
        Crafty('LevelLoader').loadRats(newLevel["rats"]);
        Crafty('LevelLoader').loadPrize(newLevel["prizes"]);
        Crafty('LevelLoader').loadBuilding1s(newLevel["building1s"]);
        return Crafty('LevelLoader').loadBuilding2s(newLevel["building2s"]);
      });
      Crafty.scene("nextLevel", function() {
        var bg, newLevel;

        window.currentLevel += 1;
        newLevel = window.levelData[window.currentLevel];
        bg = Crafty.e("2D, Canvas, Image");
        bg.attr({
          x: -Crafty.viewport.width,
          y: -Crafty.viewport.height,
          w: Crafty.viewport.width * 2 + newLevel["width"],
          h: Crafty.viewport.height * 2 + newLevel["height"]
        });
        bg.image("assets/img/bg2.png", "repeat");
        Crafty('LevelLoader').loadBorder(newLevel["width"], newLevel["height"]);
        Crafty('LevelLoader').loadPlayer(newLevel["player"]);
        Crafty('LevelLoader').loadEnemies(newLevel["enemies"]);
        Crafty('LevelLoader').loadRats(newLevel["rats"]);
        Crafty('LevelLoader').loadPrize(newLevel["prizes"]);
        Crafty('LevelLoader').loadBuilding1s(newLevel["building1s"]);
        return Crafty('LevelLoader').loadBuilding2s(newLevel["building2s"]);
      });
      Crafty.scene("endGame", function() {
        return Crafty('LevelLoader').endGame();
      });
    },
    nextLevel: function() {
      if (window.currentLevel + 1 === window.levelData.length) {
        Crafty.scene("endGame");
      } else {
        Crafty.scene("nextLevel");
      }
    },
    reloadLevel: function() {
      Crafty.scene("currentLevel");
    },
    endGame: function() {
      var bg;

      Crafty.viewport.x = Crafty.viewport.y = 0;
      bg = Crafty.e("2D, Canvas, Image");
      bg.attr({
        x: 0,
        y: 0,
        w: Crafty.viewport.width,
        h: Crafty.viewport.height
      });
      bg.image("assets/img/bg2.png", "repeat");
      this.text = Crafty.e("2D, DOM, Text, Keyboard");
      this.text.attr({
        x: (Crafty.viewport.width / 2) - 100,
        y: (Crafty.viewport.height / 2) - 100
      });
      this.text.textColor("#FF0000", 1);
      this.text.css({
        "font-size": "3em",
        "font-weight": "bold"
      });
      this.text.text("Game Over!");
    },
    loadBorder: function(width, height) {
      var building, x, y, _i, _j, _k, _l, _ref;

      x = -100;
      for (y = _i = -100; _i <= height; y = _i += 100) {
        building = Crafty.e('Border');
        building.x = x;
        building.y = y;
        building.z = y + building.h;
      }
      y = -100;
      for (x = _j = 0; _j <= width; x = _j += 100) {
        building = Crafty.e('Border');
        building.x = x;
        building.y = y;
        building.z = y + building.h;
      }
      x = width;
      for (y = _k = 0, _ref = height - 100; _k <= _ref; y = _k += 100) {
        building = Crafty.e('Border');
        building.x = x;
        building.y = y;
        building.z = y + building.h;
      }
      y = height;
      for (x = _l = 0; _l <= width; x = _l += 100) {
        building = Crafty.e('Border');
        building.x = x;
        building.y = y;
        building.z = y + building.h;
      }
    },
    loadPlayer: function(data) {
      console.log("Player");
      console.log(data);
      this.playerHolder = Window.playerEntity = Crafty.e("PlayerCharacter");
      this.playerHolder.x = this.playerHolder.targetX = data["x"];
      this.playerHolder.y = this.playerHolder.targetY = data["y"];
      this.playerHolder.z = this.playerHolder.y + this.playerHolder.h;
      Crafty.viewport.clampToEntities = false;
      Crafty.viewport.follow(this.playerHolder, 0, 0);
    },
    loadEnemies: function(enemies) {
      var enemy, _i, _len;

      console.log("Enemies");
      for (_i = 0, _len = enemies.length; _i < _len; _i++) {
        enemy = enemies[_i];
        console.log(enemy);
        this.enemyHolder = Crafty.e("Enemy");
        this.enemyHolder.x = this.enemyHolder.targetX = enemy["x"];
        this.enemyHolder.y = this.enemyHolder.targetY = enemy["y"];
        this.enemyHolder.z = this.enemyHolder.y + this.enemyHolder.h;
      }
    },
    loadRats: function(rats) {
      var rat, _i, _len;

      console.log("Rats");
      for (_i = 0, _len = rats.length; _i < _len; _i++) {
        rat = rats[_i];
        console.log(rat);
        this.ratHolder = Crafty.e("Rat");
        this.ratHolder.attr({
          x: rat["x"],
          y: rat["y"]
        });
        this.ratHolder.z = this.ratHolder.y + this.ratHolder.h;
        this.ratHolder.attr({
          left: rat["l"],
          right: rat["r"]
        });
        this.ratHolder.patrolState = rat["s"];
      }
    },
    loadPrize: function(prizes) {
      var prize, _i, _len;

      for (_i = 0, _len = prizes.length; _i < _len; _i++) {
        prize = prizes[_i];
        console.log("Prize");
        console.log(prize);
        this.prizeHolder = Crafty.e("Prize");
        this.prizeHolder.attr({
          x: prize["x"],
          y: prize["y"]
        });
        this.prizeHolder.z = this.prizeHolder.y + this.prizeHolder.h;
      }
    },
    loadBuilding1s: function(building1s) {
      var building1, _i, _len;

      console.log("Building1");
      for (_i = 0, _len = building1s.length; _i < _len; _i++) {
        building1 = building1s[_i];
        console.log(building1);
        this.hrHolder = Crafty.e("Building1");
        this.hrHolder.attr({
          x: building1["x"],
          y: building1["y"]
        });
        this.hrHolder.z = this.hrHolder.y + this.hrHolder.h;
      }
    },
    loadBuilding2s: function(building2s) {
      var building2, _i, _len;

      console.log("Building2");
      for (_i = 0, _len = building2s.length; _i < _len; _i++) {
        building2 = building2s[_i];
        console.log(building2);
        this.hrHolder = Crafty.e("Building2");
        this.hrHolder.attr({
          x: building2["x"],
          y: building2["y"]
        });
        this.hrHolder.z = this.hrHolder.y + this.hrHolder.h;
      }
    }
  });

}).call(this);
