// Generated by CoffeeScript 1.6.2
(function() {
  Crafty.c('PlayerCharacter', {
    PlayerStates: {
      idleUp: 0,
      idleRight: 1,
      idleDown: 2,
      idleLeft: 3,
      dashUp: 4,
      dashRight: 5,
      dashDown: 6,
      dashLeft: 7,
      walkUp: 8,
      walkRight: 9,
      walkDown: 10,
      walkLeft: 11
    },
    init: function() {
      this.requires('Canvas, Color, 2D, Collision, gnome, SpriteAnimation');
      this.onHit("Prize", this._onHitPrize);
      this.onHit("Rat", this.die);
      this.onHit("Enemy", this.die);
      this.bind('KeydownActive', this._keydownActive);
      this.bind('EnterFrameActive', this._playerEnterframeActive);
      this.collision(new Crafty.polygon([20, 90], [50, 90], [50, 125], [20, 125]));
      this.movedThisTick = false;
      this.framesPerTick = 50;
      this.maxSpeed = 200;
      this.w = 70;
      this.h = 125;
      this.z = 3;
      this.color('none');
      this.playerState = this.PlayerStates.idleDown;
    },
    getX: function() {
      return this.x;
    },
    getY: function() {
      return this.y;
    },
    _keydownActive: function(e) {
      var accuracy;

      this.ACC_BOUND = .7;
      this.MULT = 5;
      if (!this.movedThisTick) {
        accuracy = Math.abs(Crafty.frame() % this.framesPerTick - this.framesPerTick / 2) * 2 / this.framesPerTick;
        switch (e.key) {
          case 37:
            this.playerState = this.PlayerStates.dashLeft;
            this.targetX -= accuracy * this.maxSpeed;
            break;
          case 39:
            this.playerState = this.PlayerStates.dashRight;
            this.targetX += accuracy * this.maxSpeed;
            break;
          case 38:
            this.playerState = this.PlayerStates.dashUp;
            this.targetY -= accuracy * this.maxSpeed;
            break;
          case 40:
            this.playerState = this.PlayerStates.dashDown;
            this.targetY += accuracy * this.maxSpeed;
        }
        if (e.key === 37 || e.key === 39 || e.key === 38 || e.key === 40) {
          console.log("accuracy " + accuracy);
          if (accuracy > this.ACC_BOUND) {
            this.blowAway(this.MULT * (accuracy - this.ACC_BOUND));
          }
        }
        this.movedThisTick = true;
      }
    },
    _playerEnterframeActive: function() {
      if (this.prevPlayerState !== this.playerState) {
        this.stop();
        switch (this.playerState) {
          case this.PlayerStates.idleUp:
            this.animate('idleUp', 0, 5, 3);
            this.animate('idleUp', 80, -1);
            break;
          case this.PlayerStates.idleRight:
            this.animate('idleRight', 0, 6, 3);
            this.animate('idleRight', 80, -1);
            break;
          case this.PlayerStates.idleDown:
            this.animate('idleDown', 0, 4, 3);
            this.animate('idleDown', 80, -1);
            break;
          case this.PlayerStates.idleLeft:
            this.animate('idleLeft', 0, 7, 3);
            this.animate('idleLeft', 80, -1);
            break;
          case this.PlayerStates.dashUp:
            this.animate('dashUp', 4, 1, 5);
            this.animate('dashUp', 25, 0);
            break;
          case this.PlayerStates.dashRight:
            this.animate('dashRight', 4, 2, 5);
            this.animate('dashRight', 25, 0);
            break;
          case this.PlayerStates.dashDown:
            this.animate('dashDown', 4, 0, 5);
            this.animate('dashDown', 25, 0);
            break;
          case this.PlayerStates.dashLeft:
            this.animate('dashLeft', 4, 3, 5);
            this.animate('dashLeft', 25, 0);
            break;
          case this.PlayerStates.walkUp:
            this.animate('walkUp', 0, 1, 3);
            this.animate('walkUp', 8, -1);
            break;
          case this.PlayerStates.walkRight:
            this.animate('walkRight', 0, 2, 3);
            this.animate('walkRight', 8, -1);
            break;
          case this.PlayerStates.walkDown:
            this.animate('walkDown', 0, 0, 3);
            this.animate('walkDown', 8, -1);
            break;
          case this.PlayerStates.walkLeft:
            this.animate('walkLeft', 0, 3, 3);
            this.animate('walkLeft', 8, -1);
        }
      }
      this.prevPlayerState = this.playerState;
      this.dx = (this.targetX - this.x) * .1;
      this.dy = (this.targetY - this.y) * .1;
      this.x += this.dx;
      this.y += this.dy;
      this.z = this.y + this.h;
      if (Math.abs(this.dx) + Math.abs(this.dy) < 5) {
        switch (this.playerState) {
          case this.PlayerStates.dashUp:
            this.playerState = this.PlayerStates.walkUp;
            break;
          case this.PlayerStates.dashRight:
            this.playerState = this.PlayerStates.walkRight;
            break;
          case this.PlayerStates.dashDown:
            this.playerState = this.PlayerStates.walkDown;
            break;
          case this.PlayerStates.dashLeft:
            this.playerState = this.PlayerStates.walkLeft;
        }
      }
      if (Math.abs(this.dx) + Math.abs(this.dy) < 1) {
        switch (this.playerState) {
          case this.PlayerStates.walkUp:
            this.playerState = this.PlayerStates.idleUp;
            break;
          case this.PlayerStates.walkRight:
            this.playerState = this.PlayerStates.idleRight;
            break;
          case this.PlayerStates.walkDown:
            this.playerState = this.PlayerStates.idleDown;
            break;
          case this.PlayerStates.walkLeft:
            this.playerState = this.PlayerStates.idleLeft;
        }
      }
      if (Crafty.frame() % this.framesPerTick === this.framesPerTick / 2) {
        this.movedThisTick = false;
      }
      if (Crafty.frame() % this.framesPerTick === this.framesPerTick - 4) {
        Crafty.audio.play("drum");
      }
    },
    blowAway: function(strength) {
      var enemy, _i, _len, _ref;

      _ref = Crafty("Enemy");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        this._pushEnemy(enemy, strength);
      }
    },
    _pushEnemy: function(e, strength) {
      var ang, cap, d, enemy, ex, ey, px, py, worstCase;

      cap = 200 * strength;
      worstCase = 20;
      enemy = Crafty(e);
      px = this.targetX;
      py = this.targetY;
      ex = enemy.x;
      ey = enemy.y;
      d = Math.max(worstCase, cap - Crafty.math.distance(px, py, ex, ey));
      ang = Math.atan2(py - ey, px - ex);
      enemy.targetX -= d * Math.cos(ang);
      return enemy.targetY -= d * Math.sin(ang);
    },
    _onHitPrize: function(hits) {
      var hit, prizes, _i, _len;

      for (_i = 0, _len = hits.length; _i < _len; _i++) {
        hit = hits[_i];
        Crafty.trigger("PrizeGet");
        hit.obj.destroy();
        prizes = Crafty("Prize");
        if (prizes.length === 0) {
          Crafty("LevelLoader").nextLevel();
        }
      }
    },
    die: function() {
      this.deadPlayer = Crafty.e('DeadPlayer');
      this.deadPlayer.x = this.x - 15;
      this.deadPlayer.y = this.y + 28;
      this.deadPlayer.z = this.y + this.h;
      return this.destroy();
    }
  });

  Crafty.c('DeadPlayer', {
    init: function() {
      this.requires('Canvas, Color, 2D, Collision, deadgnome, Sprite');
      return this.timeout(window.levelLoader.reloadLevel, 2000);
    }
  });

}).call(this);
